// Code generated by protoc-gen-gogo.
// source: serializations.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import pquads "github.com/cayleygraph/cayley/quad/pquads"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogDelta struct {
	ID        uint64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Quad      *pquads.Quad `protobuf:"bytes,2,opt,name=Quad" json:"Quad,omitempty"`
	Action    int32        `protobuf:"varint,3,opt,name=Action,proto3" json:"Action,omitempty"`
	Timestamp int64        `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (m *LogDelta) Reset()                    { *m = LogDelta{} }
func (m *LogDelta) String() string            { return proto1.CompactTextString(m) }
func (*LogDelta) ProtoMessage()               {}
func (*LogDelta) Descriptor() ([]byte, []int) { return fileDescriptorSerializations, []int{0} }

func (m *LogDelta) GetQuad() *pquads.Quad {
	if m != nil {
		return m.Quad
	}
	return nil
}

type HistoryEntry struct {
	History []uint64 `protobuf:"varint,1,rep,packed,name=History" json:"History,omitempty"`
}

func (m *HistoryEntry) Reset()                    { *m = HistoryEntry{} }
func (m *HistoryEntry) String() string            { return proto1.CompactTextString(m) }
func (*HistoryEntry) ProtoMessage()               {}
func (*HistoryEntry) Descriptor() ([]byte, []int) { return fileDescriptorSerializations, []int{1} }

type NodeData struct {
	Name  string        `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Size  int64         `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	Value *pquads.Value `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *NodeData) Reset()                    { *m = NodeData{} }
func (m *NodeData) String() string            { return proto1.CompactTextString(m) }
func (*NodeData) ProtoMessage()               {}
func (*NodeData) Descriptor() ([]byte, []int) { return fileDescriptorSerializations, []int{2} }

func (m *NodeData) GetValue() *pquads.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto1.RegisterType((*LogDelta)(nil), "proto.LogDelta")
	proto1.RegisterType((*HistoryEntry)(nil), "proto.HistoryEntry")
	proto1.RegisterType((*NodeData)(nil), "proto.NodeData")
}
func (m *LogDelta) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDelta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSerializations(dAtA, i, uint64(m.ID))
	}
	if m.Quad != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSerializations(dAtA, i, uint64(m.Quad.ProtoSize()))
		n1, err := m.Quad.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Action != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSerializations(dAtA, i, uint64(m.Action))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSerializations(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *HistoryEntry) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		dAtA3 := make([]byte, len(m.History)*10)
		var j2 int
		for _, num := range m.History {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintSerializations(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *NodeData) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSerializations(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Size != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSerializations(dAtA, i, uint64(m.Size))
	}
	if m.Value != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSerializations(dAtA, i, uint64(m.Value.ProtoSize()))
		n4, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64Serializations(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Serializations(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSerializations(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogDelta) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSerializations(uint64(m.ID))
	}
	if m.Quad != nil {
		l = m.Quad.Size()
		n += 1 + l + sovSerializations(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovSerializations(uint64(m.Action))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSerializations(uint64(m.Timestamp))
	}
	return n
}

func (m *HistoryEntry) Size() (n int) {
	var l int
	_ = l
	if len(m.History) > 0 {
		l = 0
		for _, e := range m.History {
			l += sovSerializations(uint64(e))
		}
		n += 1 + sovSerializations(uint64(l)) + l
	}
	return n
}

func (m *NodeData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSerializations(uint64(l))
	}
	if m.Size != 0 {
		n += 1 + sovSerializations(uint64(m.Size))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovSerializations(uint64(l))
	}
	return n
}

func sovSerializations(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSerializations(x uint64) (n int) {
	return sovSerializations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogDelta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerializations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogDelta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogDelta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerializations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerializations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSerializations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quad == nil {
				m.Quad = &pquads.Quad{}
			}
			if err := m.Quad.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerializations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerializations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSerializations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSerializations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerializations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSerializations
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSerializations
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSerializations
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.History = append(m.History, v)
				}
			} else if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSerializations
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.History = append(m.History, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSerializations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSerializations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerializations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerializations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSerializations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size", wireType)
			}
			m.Size = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerializations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerializations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSerializations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &pquads.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSerializations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSerializations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSerializations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSerializations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSerializations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSerializations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSerializations
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSerializations
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSerializations(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSerializations = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSerializations   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("serializations.proto", fileDescriptorSerializations) }

var fileDescriptorSerializations = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0xd1, 0x4a, 0xf3, 0x30,
	0x14, 0xc7, 0xbf, 0xac, 0xdd, 0xbe, 0x2d, 0x9b, 0x5e, 0x84, 0x21, 0x65, 0x48, 0x29, 0xf3, 0x26,
	0x37, 0xb6, 0x30, 0xf1, 0x01, 0x94, 0x0a, 0x0e, 0x64, 0x60, 0x14, 0xbd, 0x3e, 0xdb, 0x62, 0x17,
	0x68, 0x97, 0x9a, 0xa6, 0x42, 0xf7, 0x14, 0x3e, 0x82, 0x8f, 0xe3, 0xa5, 0x8f, 0x20, 0xdb, 0x8b,
	0x48, 0xcf, 0x3a, 0xf4, 0xa6, 0xfd, 0xff, 0x7f, 0x27, 0x87, 0xfc, 0x08, 0x1d, 0x16, 0xd2, 0x28,
	0x48, 0xd5, 0x06, 0xac, 0xd2, 0xeb, 0x22, 0xcc, 0x8d, 0xb6, 0x9a, 0xb5, 0xf1, 0x37, 0x3a, 0x4f,
	0x94, 0x5d, 0x95, 0xf3, 0x70, 0xa1, 0xb3, 0x28, 0xd1, 0x89, 0x8e, 0x10, 0xcf, 0xcb, 0x17, 0x6c,
	0x58, 0x30, 0xed, 0xb7, 0x46, 0x97, 0x7f, 0x8e, 0x2f, 0xa0, 0x4a, 0x65, 0x95, 0x18, 0xc8, 0x57,
	0x4d, 0x8e, 0x5e, 0x4b, 0x58, 0x46, 0x79, 0xfd, 0x2d, 0x30, 0x37, 0x97, 0x8d, 0x0d, 0xed, 0xde,
	0xe9, 0x24, 0x96, 0xa9, 0x05, 0x76, 0x4c, 0x5b, 0xd3, 0xd8, 0x23, 0x01, 0xe1, 0xae, 0x68, 0x4d,
	0x63, 0x16, 0x50, 0xf7, 0xbe, 0x84, 0xa5, 0xd7, 0x0a, 0x08, 0xef, 0x4f, 0x06, 0xe1, 0x7e, 0x3d,
	0xac, 0x99, 0xc0, 0x09, 0x3b, 0xa1, 0x9d, 0xab, 0x45, 0xed, 0xee, 0x39, 0x01, 0xe1, 0x6d, 0xd1,
	0x34, 0x76, 0x4a, 0x7b, 0x8f, 0x2a, 0x93, 0x85, 0x85, 0x2c, 0xf7, 0xdc, 0x80, 0x70, 0x47, 0xfc,
	0x82, 0x31, 0xa7, 0x83, 0x5b, 0x55, 0x58, 0x6d, 0xaa, 0x9b, 0xb5, 0x35, 0x15, 0xf3, 0xe8, 0xff,
	0xa6, 0x7b, 0x24, 0x70, 0xb8, 0x2b, 0x0e, 0x75, 0xfc, 0x4c, 0xbb, 0x33, 0xbd, 0x94, 0x31, 0x58,
	0x60, 0x8c, 0xba, 0x33, 0xc8, 0x24, 0xfa, 0xf5, 0x04, 0xe6, 0x9a, 0x3d, 0xa8, 0x8d, 0x44, 0x43,
	0x47, 0x60, 0x66, 0x67, 0xb4, 0xfd, 0x06, 0x69, 0x29, 0x51, 0xa9, 0x3f, 0x39, 0x3a, 0x68, 0x3f,
	0xd5, 0x50, 0xec, 0x67, 0xd7, 0xc3, 0xcf, 0xad, 0x4f, 0xbe, 0xb6, 0x3e, 0xf9, 0xde, 0xfa, 0xe4,
	0x7d, 0xe7, 0xff, 0xfb, 0xd8, 0xf9, 0x64, 0xde, 0xc1, 0x37, 0xb9, 0xf8, 0x09, 0x00, 0x00, 0xff,
	0xff, 0x24, 0x8e, 0x93, 0x29, 0x98, 0x01, 0x00, 0x00,
}
